{"version":3,"sources":["webpack:///./src/components/post-link.jsx","webpack:///./src/pages/index.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["PostLink","_ref","className","post","Object","core_browser_esm","gatsby_browser_entry","to","frontmatter","path","title","date","IndexPage","Posts","data","allMarkdownRemark","edges","filter","edge","node","map","post_link","key","id","layout","seo","keywords","pageQuery","m","module","exports","require","default","StaticQueryContext","React","createContext","StaticQuery","props","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","Consumer","staticQueryData","query","render","children","propTypes","PropTypes","object","string","isRequired","func","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","createElement","InternalPageRenderer","assign","json","shape","Header","siteTitle","style","background","marginBottom","margin","maxWidth","padding","rel","href","color","textDecoration","ti","defaultProps","Layout","react_default","a","Fragment","header","site","siteMetadata","paddingTop","fontSize","marginTop","Date","getFullYear","_755544856","SEO","description","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_1__","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_4___default","htmlAttributes","titleTemplate","link","name","content","property","author","concat","length","join","array","arrayOf"],"mappings":"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","file":"component---src-pages-index-js-5c048d5ca3b273e896ca.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\n\nconst PostLink = ({ className, post }) => (\n  <div>\n    <Link className={className} to={post.frontmatter.path}>\n      {post.frontmatter.title} (<time className=\"dt-published\">{post.frontmatter.date}</time>)\n    </Link>\n  </div>\n);\n\nexport default PostLink;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\n\nimport PostLink from \"../components/post-link\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\n\nconst IndexPage = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}) => {\n  const Posts = edges\n    .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n    .map(edge => <PostLink key={edge.node.id} post={edge.node} />);\n  return (\n    <Layout>\n      <SEO\n        title=\"What's next for Kevin?\"\n        keywords={[\n          \"whatsnextforkev.in\",\n          \"application\",\n          \"indieweb\",\n          \"Kevin Hernandez\",\n          \"react\",\n          \"kevdez\",\n        ]}\n      />\n      <p>hello. welcome to my site.</p>\n      <article className=\"h-entry\">\n        <div className=\"e-content p-name\">\n          This is my first indieweb blog. Let's hope I'm doing things right.\n        </div>\n      </article>\n      <div>{Posts}</div>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","// import { Link } from \"gatsby\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { TiSocialGithub } from \"react-icons/ti\";\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `#edddd4`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <a\n          className=\"h-card\"\n          rel=\"me\"\n          href=\"http://www.whatsnextforkev.in/\"\n          style={{\n            color: `#197278`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </a>\n        <a href=\"https://github.com/kevdez\" rel=\"me\">\n          <TiSocialGithub color=\"#283d3b\" />\n        </a>\n      </h1>\n    </div>\n  </header>\n);\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  siteTitle: ``,\n};\n\nexport default Header;\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\n/**\n * my color scheme:\n * #283d3b\n * #197278\n * #edddd4\n * #c44536\n * #772e25\n */\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            margin: `0 auto`,\n            maxWidth: 960,\n            padding: `0px 1.0875rem 1.45rem`,\n            paddingTop: 0,\n          }}\n        >\n          <main>{children}</main>\n          <footer style={{fontSize: \"10px\", marginTop: \"30px\"}}>\n            © {new Date().getFullYear()}, Built with\n            {` `}\n            <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n          </footer>\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Helmet from \"react-helmet\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      link={[\n        {\n          rel: \"webmention\",\n          href: \"https://webmention.io/www.whatsnextforkev.in/webmention\",\n        },\n        {\n          rel: \"pingback\",\n          href: \"https://webmention.io/www.whatsnextforkev.in/xmlrpc\",\n        },\n      ]}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n"],"sourceRoot":""}